import {
  InjectedConnector
} from "./chunk-VPFQ6CNA.js";
import {
  assertWindowEthereum
} from "./chunk-B2TBXXRZ.js";
import "./chunk-5DOGRJYJ.js";
import "./chunk-DISFNJD5.js";
import "./chunk-FDIYLI6H.js";
import "./chunk-NSH36347.js";
import "./chunk-HDD45CGW.js";
import "./chunk-NBFJ3KHJ.js";
import {
  init_lib7 as init_lib
} from "./chunk-KC6NNU7E.js";
import "./chunk-C56U6TOF.js";
import "./chunk-OPAF3CF6.js";
import "./chunk-H3V7PHW7.js";
import "./chunk-K6EL5C3Z.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js
init_shim();
init_lib();
var TrustConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "Trust",
      getProvider() {
        var _a;
        function getReady(ethereum) {
          const isTrust = !!(ethereum == null ? void 0 : ethereum.isTrust);
          if (!isTrust) {
            return;
          }
          return ethereum;
        }
        if (assertWindowEthereum(globalThis.window)) {
          if ((_a = globalThis.window.ethereum) == null ? void 0 : _a.providers) {
            return globalThis.window.ethereum.providers.find(getReady);
          }
          return getReady(globalThis.window.ethereum);
        }
      }
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
  }
};
export {
  TrustConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-trust.browser.esm-2XIOLO4T.js.map
