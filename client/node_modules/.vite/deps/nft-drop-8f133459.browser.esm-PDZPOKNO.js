import {
  StandardErc721
} from "./chunk-JYWVLHBO.js";
import {
  PaperCheckout
} from "./chunk-JJMMLIZC.js";
import "./chunk-NKKZ5S2Z.js";
import {
  DropClaimConditions
} from "./chunk-LCEBAZG4.js";
import {
  ContractPrimarySale
} from "./chunk-VLUSWNUH.js";
import {
  ContractOwner,
  ContractRoyalty,
  DelayedReveal
} from "./chunk-QEMTFT2D.js";
import {
  require_fast_deep_equal
} from "./chunk-UAQBF4FC.js";
import "./chunk-4FLJ7AXJ.js";
import {
  ContractPlatformFee
} from "./chunk-PACA7OF2.js";
import {
  ContractInterceptor
} from "./chunk-JFA442KI.js";
import {
  DEFAULT_QUERY_ALL_COUNT
} from "./chunk-UDW4GHLE.js";
import "./chunk-IRG2K5IH.js";
import {
  ContractRoles
} from "./chunk-CX3L7LCT.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator
} from "./chunk-O3KLRFRE.js";
import {
  AbiSchema,
  ContractWrapper,
  DropErc721ContractSchema,
  FEATURE_NFT_REVEALABLE,
  NFT_BASE_CONTRACT_ROLES,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58
} from "./chunk-PKZFZVQJ.js";
import {
  require_utils
} from "./chunk-TYGHEAKX.js";
import "./chunk-D7LH2CO4.js";
import "./chunk-EE55PL3Y.js";
import "./chunk-NBFJ3KHJ.js";
import "./chunk-DHMVYZV7.js";
import "./chunk-7DQHQEI5.js";
import "./chunk-UVXELCFU.js";
import "./chunk-RLHLCECS.js";
import {
  init_lib7 as init_lib
} from "./chunk-KC6NNU7E.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-C56U6TOF.js";
import "./chunk-OPAF3CF6.js";
import {
  require_bn
} from "./chunk-H3V7PHW7.js";
import "./chunk-HZQFHQLI.js";
import "./chunk-RW4LJ3ZA.js";
import "./chunk-YDRBHGWK.js";
import "./chunk-K6EL5C3Z.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __publicField,
  __toESM
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/sdk/dist/nft-drop-8f133459.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var _NFTDrop = class extends StandardErc721 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "createBatch", buildTransactionFunction(async (metadatas, options) => {
      return this.erc721.lazyMint.prepare(metadatas, options);
    }));
    __publicField(this, "claimTo", buildTransactionFunction((() => {
      var _this = this;
      return async function(destinationAddress, quantity) {
        let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
        return _this.erc721.claimTo.prepare(destinationAddress, quantity, {
          checkERC20Allowance
        });
      };
    })()));
    __publicField(this, "claim", buildTransactionFunction((() => {
      var _this2 = this;
      return async function(quantity) {
        let checkERC20Allowance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);
      };
    })()));
    __publicField(this, "burn", buildTransactionFunction(async (tokenId) => {
      return this.erc721.burn.prepare(tokenId);
    }));
    __publicField(this, "transfer", buildTransactionFunction(async (to, tokenId) => {
      return this.erc721.transfer.prepare(to, tokenId);
    }));
    __publicField(this, "setApprovalForAll", buildTransactionFunction(async (operator, approved) => {
      return this.erc721.setApprovalForAll.prepare(operator, approved);
    }));
    __publicField(this, "setApprovalForToken", buildTransactionFunction(async (operator, tokenId) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "approve",
        args: [operator, tokenId]
      });
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _NFTDrop.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.owner = new ContractOwner(this.contractWrapper);
    this.checkout = new PaperCheckout(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  async totalSupply() {
    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);
    return claimed.add(unclaimed);
  }
  async getAllClaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const maxId = Math.min((await this.contractWrapper.read("nextTokenIdToClaim", [])).toNumber(), start + count);
    return await Promise.all(Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())));
  }
  async getAllUnclaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.read("nextTokenIdToClaim", [])).toNumber(), start));
    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint", [])).toNumber(), firstTokenId.toNumber() + count));
    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));
  }
  async totalClaimedSupply() {
    return this.erc721.totalClaimedSupply();
  }
  async totalUnclaimedSupply() {
    return this.erc721.totalUnclaimedSupply();
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  async getClaimTransaction(destinationAddress, quantity) {
    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    return this.erc721.getClaimTransaction(destinationAddress, quantity, {
      checkERC20Allowance
    });
  }
  async get(tokenId) {
    return this.erc721.get(tokenId);
  }
  async ownerOf(tokenId) {
    return this.erc721.ownerOf(tokenId);
  }
  async balanceOf(address) {
    return this.erc721.balanceOf(address);
  }
  async balance() {
    return this.erc721.balance();
  }
  async isApproved(address, operator) {
    return this.erc721.isApproved(address, operator);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var NFTDrop = _NFTDrop;
__publicField(NFTDrop, "contractRoles", NFT_BASE_CONTRACT_ROLES);
export {
  NFTDrop
};
//# sourceMappingURL=nft-drop-8f133459.browser.esm-PDZPOKNO.js.map
