import "./chunk-5WVVQIJW.js";
import {
  Connector
} from "./chunk-KU45NJHX.js";
import "./chunk-7JDD7G3U.js";
import "./chunk-ILT4733F.js";
import {
  normalizeChainId
} from "./chunk-5DOGRJYJ.js";
import {
  _defineProperty
} from "./chunk-HDD45CGW.js";
import "./chunk-CYODSTUI.js";
import "./chunk-2CJNR6MI.js";
import "./chunk-MIRBHWTG.js";
import "./chunk-XXU6U6RC.js";
import "./chunk-C2K42W27.js";
import "./chunk-NKKZ5S2Z.js";
import "./chunk-LCEBAZG4.js";
import "./chunk-P55LB4TH.js";
import "./chunk-VLUSWNUH.js";
import "./chunk-QEMTFT2D.js";
import "./chunk-UAQBF4FC.js";
import "./chunk-4FLJ7AXJ.js";
import "./chunk-3OSQYQKA.js";
import "./chunk-4LQPSEYH.js";
import "./chunk-2NZDBK6Z.js";
import "./chunk-PACA7OF2.js";
import "./chunk-JFA442KI.js";
import "./chunk-UDW4GHLE.js";
import "./chunk-IRG2K5IH.js";
import "./chunk-CX3L7LCT.js";
import "./chunk-O3KLRFRE.js";
import {
  getChainProvider
} from "./chunk-PKZFZVQJ.js";
import "./chunk-TYGHEAKX.js";
import "./chunk-D7LH2CO4.js";
import "./chunk-EE55PL3Y.js";
import "./chunk-NBFJ3KHJ.js";
import "./chunk-DHMVYZV7.js";
import "./chunk-7DQHQEI5.js";
import "./chunk-UVXELCFU.js";
import "./chunk-TAZOZXK6.js";
import "./chunk-WBD3WW2Z.js";
import "./chunk-RLHLCECS.js";
import "./chunk-KC6NNU7E.js";
import "./chunk-C56U6TOF.js";
import "./chunk-OPAF3CF6.js";
import "./chunk-H3V7PHW7.js";
import "./chunk-HZQFHQLI.js";
import "./chunk-RW4LJ3ZA.js";
import "./chunk-YDRBHGWK.js";
import "./chunk-K6EL5C3Z.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js
init_shim();
var SignerConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getUpdatedSigner(this.options.signer, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getUpdatedSigner(this.options.signer, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getUpdatedSigner(signer, provider) {
  if (provider) {
    return signer.connect(provider);
  }
  return signer;
}
export {
  SignerConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-signer.browser.esm-CP4XXE4Y.js.map
