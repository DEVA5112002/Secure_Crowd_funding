import {
  Account,
  AccountFactory,
  Airdrop1155,
  Airdrop20,
  Airdrop721,
  ContractPublishedMetadata,
  ExtensionManager
} from "./chunk-ILT4733F.js";
import {
  Erc20
} from "./chunk-MIRBHWTG.js";
import {
  MarketplaceV3DirectListings,
  MarketplaceV3EnglishAuctions,
  MarketplaceV3Offers
} from "./chunk-XXU6U6RC.js";
import {
  Erc721
} from "./chunk-NKKZ5S2Z.js";
import "./chunk-LCEBAZG4.js";
import {
  Erc1155
} from "./chunk-P55LB4TH.js";
import {
  ContractPrimarySale
} from "./chunk-VLUSWNUH.js";
import {
  ContractOwner,
  ContractRoyalty
} from "./chunk-QEMTFT2D.js";
import {
  require_fast_deep_equal
} from "./chunk-UAQBF4FC.js";
import {
  assertEnabled
} from "./chunk-4FLJ7AXJ.js";
import "./chunk-4LQPSEYH.js";
import "./chunk-2NZDBK6Z.js";
import {
  ContractPlatformFee
} from "./chunk-PACA7OF2.js";
import {
  ContractInterceptor
} from "./chunk-JFA442KI.js";
import "./chunk-UDW4GHLE.js";
import "./chunk-IRG2K5IH.js";
import {
  ContractRoles
} from "./chunk-CX3L7LCT.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator,
  detectContractFeature
} from "./chunk-O3KLRFRE.js";
import {
  ALL_ROLES,
  AbiSchema,
  ContractWrapper,
  CustomContractSchema,
  FEATURE_ACCOUNT,
  FEATURE_ACCOUNT_FACTORY,
  FEATURE_AIRDROP_ERC1155,
  FEATURE_AIRDROP_ERC20,
  FEATURE_AIRDROP_ERC721,
  FEATURE_APPURI,
  FEATURE_DIRECT_LISTINGS,
  FEATURE_DYNAMIC_CONTRACT,
  FEATURE_EDITION,
  FEATURE_ENGLISH_AUCTIONS,
  FEATURE_NFT,
  FEATURE_OFFERS,
  FEATURE_OWNER,
  FEATURE_PERMISSIONS,
  FEATURE_PLATFORM_FEE,
  FEATURE_PRIMARY_SALE,
  FEATURE_ROYALTY,
  FEATURE_TOKEN,
  Transaction,
  require_bs58
} from "./chunk-PKZFZVQJ.js";
import {
  require_utils
} from "./chunk-TYGHEAKX.js";
import "./chunk-D7LH2CO4.js";
import "./chunk-EE55PL3Y.js";
import "./chunk-NBFJ3KHJ.js";
import "./chunk-DHMVYZV7.js";
import "./chunk-7DQHQEI5.js";
import "./chunk-UVXELCFU.js";
import "./chunk-RLHLCECS.js";
import {
  init_lib7 as init_lib
} from "./chunk-KC6NNU7E.js";
import "./chunk-C56U6TOF.js";
import "./chunk-OPAF3CF6.js";
import {
  require_bn
} from "./chunk-H3V7PHW7.js";
import "./chunk-HZQFHQLI.js";
import "./chunk-RW4LJ3ZA.js";
import "./chunk-YDRBHGWK.js";
import "./chunk-K6EL5C3Z.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __toESM
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/sdk/dist/smart-contract-d36a4322.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var SmartContract = class {
  get abi() {
    return AbiSchema.parse(this.contractWrapper.abi || []);
  }
  get royalties() {
    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);
  }
  get roles() {
    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);
  }
  get sales() {
    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);
  }
  get platformFees() {
    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);
  }
  get owner() {
    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);
  }
  get erc20() {
    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);
  }
  get erc721() {
    return assertEnabled(this.detectErc721(), FEATURE_NFT);
  }
  get erc1155() {
    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);
  }
  get app() {
    return assertEnabled(this.detectApp(), FEATURE_APPURI);
  }
  get directListings() {
    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);
  }
  get englishAuctions() {
    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);
  }
  get offers() {
    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);
  }
  get airdrop20() {
    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);
  }
  get airdrop721() {
    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);
  }
  get airdrop1155() {
    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);
  }
  get accountFactory() {
    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);
  }
  get account() {
    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);
  }
  get extensions() {
    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);
  }
  get chainId() {
    return this._chainId;
  }
  constructor(network, address, abi, storage) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    this._chainId = chainId;
    this.storage = storage;
    this.contractWrapper = contractWrapper;
    this.events = new ContractEvents(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);
    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
  detectRoyalties() {
    if (detectContractFeature(this.contractWrapper, "Royalty")) {
      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
      return new ContractRoyalty(this.contractWrapper, metadata);
    }
    return void 0;
  }
  detectRoles() {
    if (detectContractFeature(this.contractWrapper, "Permissions")) {
      return new ContractRoles(this.contractWrapper, ALL_ROLES);
    }
    return void 0;
  }
  detectPrimarySales() {
    if (detectContractFeature(this.contractWrapper, "PrimarySale")) {
      return new ContractPrimarySale(this.contractWrapper);
    }
    return void 0;
  }
  detectPlatformFees() {
    if (detectContractFeature(this.contractWrapper, "PlatformFee")) {
      return new ContractPlatformFee(this.contractWrapper);
    }
    return void 0;
  }
  detectErc20() {
    if (detectContractFeature(this.contractWrapper, "ERC20")) {
      return new Erc20(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectErc721() {
    if (detectContractFeature(this.contractWrapper, "ERC721")) {
      return new Erc721(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectErc1155() {
    if (detectContractFeature(this.contractWrapper, "ERC1155")) {
      return new Erc1155(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectOwnable() {
    if (detectContractFeature(this.contractWrapper, "Ownable")) {
      return new ContractOwner(this.contractWrapper);
    }
    return void 0;
  }
  detectApp() {
    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
    if (detectContractFeature(this.contractWrapper, "AppURI")) {
      return new ContractAppURI(this.contractWrapper, metadata, this.storage);
    } else if (detectContractFeature(this.contractWrapper, "ContractMetadata")) {
      return new ContractAppURI(this.contractWrapper, metadata, this.storage);
    }
    return void 0;
  }
  detectDirectListings() {
    if (detectContractFeature(this.contractWrapper, "DirectListings")) {
      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectEnglishAuctions() {
    if (detectContractFeature(this.contractWrapper, "EnglishAuctions")) {
      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectOffers() {
    if (detectContractFeature(this.contractWrapper, "Offers")) {
      return new MarketplaceV3Offers(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectBaseRouter() {
    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {
      return new ExtensionManager(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop20() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC20")) {
      return new Airdrop20(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop721() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC721")) {
      return new Airdrop721(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop1155() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC1155")) {
      return new Airdrop1155(this.contractWrapper);
    }
    return void 0;
  }
  detectAccountFactory() {
    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {
      return new AccountFactory(this.contractWrapper);
    }
    return void 0;
  }
  detectAccount() {
    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {
      return new Account(this.contractWrapper);
    }
    return void 0;
  }
};
export {
  SmartContract
};
//# sourceMappingURL=smart-contract-d36a4322.browser.esm-R4SLNJVM.js.map
